namespace Skew.Tests {
  def testJavaScriptMangle {

# Test falsy values
test("
class Foo {
}

@entry
def main {
  var i int
  var s string
  var d double
  var b bool
  var f Foo
  var y dynamic

  if i != 0 { dynamic.foo() }
  if s != \"\" { dynamic.foo() }
  if s != null { dynamic.foo() }
  if d != 0.0 { dynamic.foo() }
  if b != false { dynamic.foo() }
  if f != null { dynamic.foo() }

  if y != 0 { dynamic.foo() }
  if y != \"\" { dynamic.foo() }
  if y != 0.0 { dynamic.foo() }
  if y != false { dynamic.foo() }
  if y != null { dynamic.foo() }
}
", "
(function() {
  function g() {
    var c = 0, b = null, d = 0, e = !1, f = null, a = null;
    c && foo(), b != '' && foo(), b != null && foo(), d != 0 && foo(), e != !1 && foo(), f && foo(), a !== 0 && foo(), a !== '' && foo(), a !== 0 && foo(), a !== !1 && foo(), a !== null && foo();
  }

  g();
})();
").jsMangle

# Test default values
test("
@entry
def main {
  var i int
  var s string
  var d double
  var b bool
  var f Foo
  var r = i.toString + d.toString + b.toString + s + f.toString
}

class Foo {
  def toString string
}
", "
(function() {
  function e() {
    var a = null, b = null, d = '0' + 0 + 'false' + a + b.c();
  }

  e();
})();
").jsMangle.foldAllConstants

# Test associative operator rotation
test("
def foo {
  dynamic.test(dynamic.a + (dynamic.b + dynamic.c))
  dynamic.test(dynamic.a - (dynamic.b - dynamic.c))
  dynamic.test(dynamic.a * (dynamic.b * dynamic.c))
  dynamic.test(dynamic.a / (dynamic.b / dynamic.c))
  dynamic.test(dynamic.a & (dynamic.b & dynamic.c))
  dynamic.test(dynamic.a | (dynamic.b | dynamic.c))
  dynamic.test(dynamic.a ^ (dynamic.b ^ dynamic.c))
  dynamic.test(dynamic.a && (dynamic.b && dynamic.c))
  dynamic.test(dynamic.a || (dynamic.b || dynamic.c))
}

@entry
def bar {
  dynamic.test(dynamic.a & ((dynamic.b | dynamic.c) & (dynamic.d & (dynamic.e & dynamic.f))))
  foo
}
", "
(function() {
  function a() {
    test(a + (b + c)), test(a - (b - c)), test(a * (b * c)), test(a / (b / c)), test(a & b & c), test(a | b | c), test(a ^ b ^ c), test(a && b && c), test(a || b || c);
  }

  function b() {
    test(a & (b | c) & d & e & f), a();
  }

  b();
})();
").jsMangle

# Test if statement folding
test("
@entry
def main {
  if dynamic.a() {}
  if dynamic.b() { dynamic.c() }
  if dynamic.d() {}
  else { dynamic.e() }
  if dynamic.f() { dynamic.g() }
  else { dynamic.h() }
}
", "
(function() {
  function a() {
    a(), b() && c(), d() || e(), f() ? g() : h();
  }

  a();
})();
").jsMangle.foldAllConstants

# Test if statement return folding
test("
def foo bool {
  if dynamic.a { return true }
  if dynamic.b && dynamic.c { return true }
  if dynamic.d { return true }
  if dynamic.e && dynamic.f { return true }
  return false
}

def bar bool {
  if dynamic.a { return true }
  else if dynamic.b && dynamic.c { return true }
  else if dynamic.d { return true }
  else if dynamic.e && dynamic.f { return true }
  else { return false }
}

def baz bool {
  if dynamic.a || dynamic.b {
    if dynamic.c || dynamic.d {
      return true
    }
  }
  return false
}

@entry
def main {
  foo
  bar
  baz
}
", "
(function() {
  function a() {
    return a || b && c || d || e && f ? !0 : !1;
  }

  function b() {
    return a || b && c || d || e && f ? !0 : !1;
  }

  function c() {
    return (a || b) && (c || d) ? !0 : !1;
  }

  function d() {
    a(), b(), c();
  }

  d();
})();
").jsMangle

# More tests for if statement return folding
test("
def foo(x dynamic) dynamic {
  x.foo(1)
  if x.y {
    x.foo(2)
    if x.y {
      x.foo(0)
      return x
    }
  }
  x.foo(3)
  if x.y {
    x.foo(4)
    if x.y {
      x.foo(0)
      return x
    }
  }
  return 0
}

def bar(x double) int {
  if x < 0 { return 0 }
  if x > 1 { return 1 }
  return 2
}

@entry
def main {
  foo(0)
  bar(0)
}
", "
(function() {
  function b(a) {
    return (a.foo(1), a.y && (a.foo(2), a.y)) || (a.foo(3), a.y && (a.foo(4), a.y)) ? (a.foo(0), a) : 0;
  }

  function c(a) {
    return a < 0 ? 0 : a > 1 ? 1 : 2;
  }

  function d() {
    b(0), c(0);
  }

  d();
})();
").jsMangle

# Test integer comparison special cases
test("
def foo(bar int, baz fn()) {
  if bar < 1 { baz() }
  if bar <= 1 { baz() }
  if bar > 1 { baz() }
  if bar >= 1 { baz() }
  if bar == 1 { baz() }
  if bar != 1 { baz() }
}

def bar(foo int, baz fn()) {
  if 1 < foo { baz() }
  if 1 <= foo { baz() }
  if 1 > foo { baz() }
  if 1 >= foo { baz() }
  if 1 == foo { baz() }
  if 1 != foo { baz() }
}

@entry
def main {
  foo(0, null)
  bar(0, null)
}
", "
(function() {
  function c(a, b) {
    a < 1 && b(), a < 2 && b(), a > 1 && b(), a > 0 && b(), a ^ 1 || b(), a ^ 1 && b();
  }

  function d(a, b) {
    1 < a && b(), 0 < a && b(), 1 > a && b(), 2 > a && b(), 1 ^ a || b(), 1 ^ a && b();
  }

  function e() {
    c(0, null), d(0, null);
  }

  e();
})();
").jsMangle

# Test enum comparison special cases
test("
def foo(bar Foo, baz fn()) {
  if bar < Foo.BAR { baz() }
  if bar <= Foo.BAR { baz() }
  if bar > Foo.BAR { baz() }
  if bar >= Foo.BAR { baz() }
  if bar == Foo.FOO { baz() }
  if bar != Foo.FOO { baz() }
  if bar == Foo.BAR { baz() }
  if bar != Foo.BAR { baz() }
}

def bar(foo Foo, baz fn()) {
  if Foo.BAR < foo { baz() }
  if Foo.BAR <= foo { baz() }
  if Foo.BAR > foo { baz() }
  if Foo.BAR >= foo { baz() }
  if Foo.FOO == foo { baz() }
  if Foo.FOO != foo { baz() }
  if Foo.BAR == foo { baz() }
  if Foo.BAR != foo { baz() }
}

@entry
def main {
  foo(.FOO, null)
  bar(.BAR, null)
}

enum Foo {
  FOO
  BAR
}
", "
(function() {
  function c(a, b) {
    a < 1 && b(), a < 2 && b(), a > 1 && b(), a > 0 && b(), a || b(), a && b(), a ^ 1 || b(), a ^ 1 && b();
  }

  function d(a, b) {
    1 < a && b(), 0 < a && b(), 1 > a && b(), 2 > a && b(), a || b(), a && b(), 1 ^ a || b(), 1 ^ a && b();
  }

  function e() {
    c(0, null), d(1, null);
  }

  e();
})();
").jsMangle.foldAllConstants

# Doubles should not trigger integer comparison special cases
test("
def foo(bar double, baz fn()) {
  if bar < 1 { baz() }
  if bar <= 1 { baz() }
  if bar > 1 { baz() }
  if bar >= 1 { baz() }
  if bar == 1 { baz() }
  if bar != 1 { baz() }
}

def bar(foo double, baz fn()) {
  if 1 < foo { baz() }
  if 1 <= foo { baz() }
  if 1 > foo { baz() }
  if 1 >= foo { baz() }
  if 1 == foo { baz() }
  if 1 != foo { baz() }
}

@entry
def main {
  foo(0, null)
  bar(0, null)
}
", "
(function() {
  function c(a, b) {
    a < 1 && b(), a <= 1 && b(), a > 1 && b(), a >= 1 && b(), a == 1 && b(), a != 1 && b();
  }

  function d(a, b) {
    1 < a && b(), 1 <= a && b(), 1 > a && b(), 1 >= a && b(), 1 == a && b(), 1 != a && b();
  }

  function e() {
    c(0, null), d(0, null);
  }

  e();
})();
").jsMangle

# Test a special case for comparison with -1
test("
def foo(bar string) {
  if \"foo\" in bar { dynamic.bar() }
}

@entry
def main {
  foo(null)
}
", "
(function() {
  function a(b) {
    ~b.indexOf('foo') && bar();
  }

  function c() {
    a(null);
  }

  c();
})();
").jsMangle.inlineAllFunctions.foldAllConstants

# Test index to member conversions
test("
def foo(map StringMap<int>) {
  dynamic.test(map[\"x\"])
  dynamic.test(map[\"_\"])
  dynamic.test(map[\"0\"])
  dynamic.test(map[\"x0\"])
  dynamic.test(map[\"if\"])
}

def bar(map StringMap<int>) {
  map[\"x\"] = dynamic.test()
  map[\"_\"] = dynamic.test()
  map[\"0\"] = dynamic.test()
  map[\"x0\"] = dynamic.test()
  map[\"if\"] = dynamic.test()
}

@entry
def main {
  foo(null)
  bar(null)
}
", "
(function() {
  function b(a) {
    test(a.x), test(a._), test(a['0']), test(a.x0), test(a['if']);
  }

  function c(a) {
    a.x = test(), a._ = test(), a['0'] = test(), a.x0 = test(), a['if'] = test();
  }

  function d() {
    b(null), c(null);
  }

  d();
})();
").jsMangle.inlineAllFunctions.foldAllConstants

# Test dead code elimination with constants
test("
enum Foo {
  FOO
  BAR
  BAZ
}

const foo = Foo.BAZ

@entry
def bar {
  if foo == .FOO { dynamic.test(\"FOO\") }
  else if foo == .BAR { dynamic.test(\"BAR\") }
  else if foo == .BAZ { dynamic.test(\"BAZ\") }
  else { dynamic.test(\"FAIL\") }
}
", "
(function() {
  function a() {
    test('BAZ');
  }

  a();
})();
").jsMangle.foldAllConstants

# Test return statement collapsing
test("
@entry
def foo {
  if dynamic.x {
    dynamic.y()
    return
  }
}
", "
(function() {
  function a() {
    if (x) {
      y();
    }
  }

  a();
})();
").jsMangle

# Test return statement collapsing
test("
@entry
def foo {
  if dynamic.x { return }
  dynamic.y()
  dynamic.y()
}
", "
(function() {
  function a() {
    x || (y(), y());
  }

  a();
})();
").jsMangle

# Test return statement collapsing
test("
@entry
def foo {
  if dynamic.x { return }
  dynamic.y()
  if dynamic.x { return }
  dynamic.y()
}
", "
(function() {
  function a() {
    x || (y(), x || y());
  }

  a();
})();
").jsMangle

# Test return statement collapsing
test("
@entry
def foo {
  if dynamic.x {
    if dynamic.y { return }
    dynamic.z()
    dynamic.z()
  }
}
", "
(function() {
  function a() {
    x && (y || (z(), z()));
  }

  a();
})();
").jsMangle

# Test return statement collapsing
test("
@entry
def foo {
  if dynamic.x {
    if dynamic.y { return }
    dynamic.z()
    dynamic.z()
  }
  dynamic.z()
}
", "
(function() {
  function a() {
    if (x) {
      if (y) {
        return;
      }

      z(), z();
    }

    z();
  }

  a();
})();
").jsMangle

# Test return statement collapsing
test("
@entry
def foo {
  while dynamic.x {
    if dynamic.y { return }
    dynamic.z()
    dynamic.z()
  }
}
", "
(function() {
  function a() {
    for (; x;) {
      if (y) {
        return;
      }

      z(), z();
    }
  }

  a();
})();
").jsMangle

# Test return statement collapsing
test("
def foo {
  dynamic.a()
  dynamic.b()
  if dynamic.c() {
    if dynamic.d() { return }
    dynamic.e()
    dynamic.f()
  }
}

@entry
def bar {
  dynamic.a()
  dynamic.b()
  if dynamic.c() {
    if dynamic.d() { return }
    dynamic.e()
    dynamic.f()
  }
  foo
}
", "
(function() {
  function a() {
    a(), b(), c() && (d() || (e(), f()));
  }

  function b() {
    if (a(), b(), c()) {
      if (d()) {
        return;
      }

      e(), f();
    }

    a();
  }

  b();
})();
").jsMangle

# Test continue statement collapsing
test("
@entry
def foo {
  while dynamic.x {
    if dynamic.y {
      dynamic.z()
      continue
    }
  }
}
", "
(function() {
  function a() {
    for (; x;) {
      if (y) {
        z();
      }
    }
  }

  a();
})();
").jsMangle

# Test continue statement collapsing
test("
@entry
def foo {
  while dynamic.x {
    if dynamic.y { continue }
    dynamic.z()
    dynamic.z()
  }
}
", "
(function() {
  function a() {
    for (; x;) {
      y || (z(), z());
    }
  }

  a();
})();
").jsMangle

# Test continue statement collapsing
test("
@entry
def foo {
  while dynamic.x {
    if dynamic.y { continue }
    dynamic.z()
    if dynamic.y { continue }
    dynamic.z()
  }
}
", "
(function() {
  function a() {
    for (; x;) {
      y || (z(), y || z());
    }
  }

  a();
})();
").jsMangle

# Test continue statement collapsing
test("
@entry
def foo {
  while dynamic.x {
    if dynamic.y {
      dynamic.z()
      if dynamic.y { continue }
      dynamic.z()
      dynamic.z()
    }
  }
}
", "
(function() {
  function a() {
    for (; x;) {
      y && (z(), y || (z(), z()));
    }
  }

  a();
})();
").jsMangle

# Test continue statement collapsing
test("
@entry
def foo {
  while dynamic.x {
    if dynamic.y {
      dynamic.z()
      if dynamic.y { continue }
      dynamic.z()
      dynamic.z()
    }
    dynamic.z()
  }
}
", "
(function() {
  function a() {
    for (; x;) {
      if (y) {
        if (z(), y) {
          continue;
        }

        z(), z();
      }

      z();
    }
  }

  a();
})();
").jsMangle

# Test continue statement collapsing
test("
@entry
def foo {
  while dynamic.x {
    if dynamic.y {
      dynamic.z()
      continue
    }
    dynamic.z()
    dynamic.z()
  }
}
", "
(function() {
  function a() {
    for (; x;) {
      y ? z() : (z(), z());
    }
  }

  a();
})();
").jsMangle

# Test continue statement collapsing
test("
def foo {
  while dynamic.x {
    dynamic.a()
    dynamic.b()
    if dynamic.c() {
      if dynamic.d() { continue }
      dynamic.e()
      dynamic.f()
    }
  }
}

@entry
def bar {
  while dynamic.x {
    dynamic.a()
    dynamic.b()
    if dynamic.c() {
      if dynamic.d() { continue }
      dynamic.e()
      dynamic.f()
    }
    foo
  }
}
", "
(function() {
  function a() {
    for (; x;) {
      a(), b(), c() && (d() || (e(), f()));
    }
  }

  function b() {
    for (; x;) {
      if (a(), b(), c()) {
        if (d()) {
          continue;
        }

        e(), f();
      }

      a();
    }
  }

  b();
})();
").jsMangle

# Test mangling the "self" variable
test("
@export
class Foo {
  var x = 100

  def foo fn() int {
    var y = dynamic.get()
    return => x + y
  }

  def bar fn() int {
    var y = dynamic.get()
    while true {
      return => x + y
    }
  }

  def baz fn() int {
    while true {
      return => x
    }
  }

  def test fn() int {
    return => x
  }
}
", "
(function(d) {
  var c;

  d.Foo = function() {
    this.x = 100;
  };

  c = d.Foo.prototype;

  c.foo = function() {
    var b = this, a = get();
    return function() {
      return b.x + a;
    };
  };

  c.bar = function() {
    for (var b = this, a = get();;) {
      return function() {
        return b.x + a;
      };
    }
  };

  c.baz = function() {
    for (var a = this;;) {
      return function() {
        return a.x;
      };
    }
  };

  c.test = function() {
    var a = this;
    return function() {
      return a.x;
    };
  };
})(this);
").jsMangle

# Test a loop special case
test("
def foo {
  while true {
    dynamic.a()
    if dynamic.b() {
      break
    }
  }
}

def bar {
  while dynamic.a() {
    dynamic.b()
    if dynamic.c() {
      break
    }
  }
}

@entry
def main {
  foo
  bar
}
", "
(function() {
  function a() {
    for (; a(), !b();) {
    }
  }

  function b() {
    for (; a() && (b(), !c());) {
    }
  }

  function c() {
    a(), b();
  }

  c();
})();
").jsMangle

# Test mangling the name of catch variables
test("
@entry
def foo {
  try {
  } catch foo dynamic {
  }
}
", "
(function() {
  function b() {
    try {
    }

    catch (a) {
    }
  }

  b();
})();
").jsMangle

test("
@entry
def foo {
  while true {
    switch dynamic.x {
      case 0 { break }
      case 1 { switch dynamic.y { case 0 { break } } }
    }
  }

  for i = 0; i < 10; i++ {
    switch dynamic.x {
      case 0 { break }
      case 1 { switch dynamic.y { case 0 { break } } }
    }
  }

  for i in 0..10 {
    switch dynamic.x {
      case 0 { break }
      case 1 { switch dynamic.y { case 0 { break } } }
    }
  }
}
", "
(function() {
  function c() {
    d: for (;;) {
      switch (x) {
        case 0: {
          break d;
        }

        case 1: {
          if (y === 0) {
            break d;
          }
          break;
        }
      }
    }

    e: for (var a = 0; a < 10; a = a + 1 | 0) {
      switch (x) {
        case 0: {
          break e;
        }

        case 1: {
          if (y === 0) {
            break e;
          }
          break;
        }
      }
    }

    f: for (var b = 0; b < 10; b = b + 1 | 0) {
      switch (x) {
        case 0: {
          break f;
        }

        case 1: {
          if (y === 0) {
            break f;
          }
          break;
        }
      }
    }
  }

  c();
})();
").jsMangle

# Test moving the default case outside the switch statement
test("
@entry
def foo {
  switch dynamic.a {
    case 0 { return }
    default {
      dynamic.b1()
      dynamic.b2()
    }
  }

  switch dynamic.a {
    case 0 { dynamic.c() }
    default {
      dynamic.d1()
      dynamic.d2()
    }
  }

  dynamic.e()
}
", "
(function() {
  function a() {
    a !== 0 && (b1(), b2(), a === 0 ? c() : (d1(), d2()), e());
  }

  a();
})();
").jsMangle

# Test inline identifiers in object literals
test("
@export
def foo dynamic {
  return {\"a\": 0, \"0\": 0, \" \": 0}
}
", "
(function(a) {
  a.foo = function() {
    return {a: 0, '0': 0, ' ': 0};
  };
})(this);
").jsMangle

# Test sequence hook rotation
test("
@export
def foo dynamic {
  return () bool => {
    dynamic.x()
    if dynamic.q {
      dynamic.x()
      return true
    }
    return false
  }
}
", "
(function(a) {
  a.foo = function() {
    return function() {
      return x(), q ? (x(), !0) : !1;
    };
  };
})(this);
").jsMangle

# Test toString() removal
test("
@export
def foo(x int, f Foo, b Bar) {
  var z = Baz.new
  dynamic.t(\"\" + x.toString)
  dynamic.t(dynamic.q + x.toString)
  dynamic.t(x.toString + \"\")
  dynamic.t(x.toString + x.toString)
  dynamic.t(f.toString + \"\")
  dynamic.t(b.toString(0) + \"\")
  dynamic.t(z.toString + \"\")
}

@import
class Foo {
  def toString string
}

@import
class Bar {
  def toString(x int) string
}

class Baz {
  def toString string { return \"\" }
}
", "
(function(g) {
  function f() {
  }

  f.prototype.c = function() {
    return '';
  };

  g.foo = function(a, d, e) {
    var b = new f;
    t('' + a), t(q + a.toString()), t(a + ''), t(a.toString() + a), t(d + ''), t(e.toString(0) + ''), t(b.c() + '');
  };
})(this);
").jsMangle

# Make sure folding doesn't leave extra variables in this case
test("
@export
def foo int {
  var a = 0, b = 0
  var c = 0
  return a + b + c
}
", "
(function(a) {
  a.foo = function() {
    return 0;
  };
})(this);
").jsMangle.foldAllConstants

# Make sure special runtime function names and definitions are mangled
test("
class Foo {}
class Bar : Foo {}

@entry
def main(args List<string>) int {
  Bar.new
  return args.count * 100
}
", "
(function() {
  var d = Object.create || function(a) {
    return {__proto__: a};
  };

  function e(a, b) {
    a.prototype = d(b.prototype), a.prototype.constructor = a;
  }

  var f = Math.imul || function(a, b) {
    return (a * (b >>> 16) << 16) + a * (b & 65535) | 0;
  };

  function i(a) {
    return new h, f(c(a), 100);
  }

  function c(a) {
    return a.length;
  }

  function g() {
  }

  function h() {
    g.call(this);
  }

  e(h, g);

  process.exit(i(process.argv.slice(2)));
})();
").jsMangle

# Make sure casting doesn't cause the enum declaration to be emitted
test("
enum Foo { FOO }

@entry
def main int {
  return 0 as Foo
}
", "
(function() {
  function a() {
    return 0;
  }

  process.exit(a());
})();
").jsMangle

# Make sure constant folding folds string lengths
test("
@entry
def foo int {
  return \"abc\".count
}
", "
(function() {
  function a() {
    return 3;
  }

  process.exit(a());
})();
").jsMangle.foldAllConstants

# Lock down the name generation algorithm
test("
@import {
  def x int
  def y
}

@entry
def main {
  var a0 = x, a1 = x, a2 = x, a3 = x, a4 = x, a5 = x, a6 = x, a7 = x, a8 = x, a9 = x
  y
  var b0 = x, b1 = x, b2 = x, b3 = x, b4 = x, b5 = x, b6 = x, b7 = x, b8 = x, b9 = x
  y
  var c0 = x, c1 = x, c2 = x, c3 = x, c4 = x, c5 = x, c6 = x, c7 = x, c8 = x, c9 = x
  y
  var d0 = x, d1 = x, d2 = x, d3 = x, d4 = x, d5 = x, d6 = x, d7 = x, d8 = x, d9 = x
  y
  var e0 = x, e1 = x, e2 = x, e3 = x, e4 = x, e5 = x, e6 = x, e7 = x, e8 = x, e9 = x
  y
  var f0 = x, f1 = x, f2 = x, f3 = x, f4 = x, f5 = x, f6 = x, f7 = x, f8 = x, f9 = x
  y
  var g0 = x, g1 = x, g2 = x, g3 = x, g4 = x, g5 = x, g6 = x, g7 = x, g8 = x, g9 = x
  y
  var h0 = x, h1 = x, h2 = x, h3 = x, h4 = x, h5 = x, h6 = x, h7 = x, h8 = x, h9 = x
  y
  var i0 = x, i1 = x, i2 = x, i3 = x, i4 = x, i5 = x, i6 = x, i7 = x, i8 = x, i9 = x
  y
  var j0 = x, j1 = x, j2 = x, j3 = x, j4 = x, j5 = x, j6 = x, j7 = x, j8 = x, j9 = x
  y
  var k0 = x, k1 = x, k2 = x, k3 = x, k4 = x, k5 = x, k6 = x, k7 = x, k8 = x, k9 = x
}
", "
(function() {
  function eb() {
    var a = x(), b = x(), c = x(), d = x(), e = x(), f = x(), g = x(), h = x(), i = x(), j = x();
    y();
    var k = x(), l = x(), m = x(), n = x(), o = x(), p = x(), q = x(), r = x(), s = x(), t = x();
    y();
    var u = x(), v = x(), w = x(), z = x(), A = x(), B = x(), C = x(), D = x(), E = x(), F = x();
    y();
    var G = x(), H = x(), I = x(), J = x(), K = x(), L = x(), M = x(), N = x(), O = x(), P = x();
    y();
    var Q = x(), R = x(), S = x(), T = x(), U = x(), V = x(), W = x(), X = x(), Y = x(), Z = x();
    y();
    var _ = x(), $ = x(), aa = x(), ba = x(), ca = x(), da = x(), ea = x(), fa = x(), ga = x(), ha = x();
    y();
    var ia = x(), ja = x(), ka = x(), la = x(), ma = x(), na = x(), oa = x(), pa = x(), qa = x(), ra = x();
    y();
    var sa = x(), ta = x(), ua = x(), va = x(), wa = x(), xa = x(), ya = x(), za = x(), Aa = x(), Ba = x();
    y();
    var Ca = x(), Da = x(), Ea = x(), Fa = x(), Ga = x(), Ha = x(), Ia = x(), Ja = x(), Ka = x(), La = x();
    y();
    var Ma = x(), Na = x(), Oa = x(), Pa = x(), Qa = x(), Ra = x(), Sa = x(), Ta = x(), Ua = x(), Va = x();
    y();
    var Wa = x(), Xa = x(), Ya = x(), Za = x(), _a = x(), $a = x(), ab = x(), bb = x(), cb = x(), db = x();
  }

  eb();
})();
").jsMangle

# Make sure it's possible to not clobber over jQuery
test("
@import {
  def x int
  def y

  @rename(\"$\")
  var jQuery dynamic
}

@entry
def main {
  var a0 = x, a1 = x, a2 = x, a3 = x, a4 = x, a5 = x, a6 = x, a7 = x, a8 = x, a9 = x
  y
  var b0 = x, b1 = x, b2 = x, b3 = x, b4 = x, b5 = x, b6 = x, b7 = x, b8 = x, b9 = x
  y
  var c0 = x, c1 = x, c2 = x, c3 = x, c4 = x, c5 = x, c6 = x, c7 = x, c8 = x, c9 = x
  y
  var d0 = x, d1 = x, d2 = x, d3 = x, d4 = x, d5 = x, d6 = x, d7 = x, d8 = x, d9 = x
  y
  var e0 = x, e1 = x, e2 = x, e3 = x, e4 = x, e5 = x, e6 = x, e7 = x, e8 = x, e9 = x
  y
  var f0 = x, f1 = x, f2 = x, f3 = x, f4 = x, f5 = x, f6 = x, f7 = x, f8 = x, f9 = x
  jQuery()
}
", "
(function() {
  function ja() {
    var a = x(), b = x(), c = x(), d = x(), e = x(), f = x(), g = x(), h = x(), i = x(), j = x();
    y();
    var k = x(), l = x(), m = x(), n = x(), o = x(), p = x(), q = x(), r = x(), s = x(), t = x();
    y();
    var u = x(), v = x(), w = x(), z = x(), A = x(), B = x(), C = x(), D = x(), E = x(), F = x();
    y();
    var G = x(), H = x(), I = x(), J = x(), K = x(), L = x(), M = x(), N = x(), O = x(), P = x();
    y();
    var Q = x(), R = x(), S = x(), T = x(), U = x(), V = x(), W = x(), X = x(), Y = x(), Z = x();
    y();
    var _ = x(), aa = x(), ba = x(), ca = x(), da = x(), ea = x(), fa = x(), ga = x(), ha = x(), ia = x();
    $();
  }

  ja();
})();
").jsMangle

# Make sure inlined helper functions are also constant folded
test("
def bar(a int, b int) int {
  return 'A' | a << 8 | 'B' << 16 | b << 24
}

@entry
def main int {
  const a = 1
  const b = 2
  const foo = bar(a, b)
  return foo
}
", "
(function() {
  function a() {
    return 37880129;
  }

  process.exit(a());
})();
").jsMangle.foldAllConstants.inlineAllFunctions

# This tests a bug where overloaded imported constructors were emitted incorrectly
test("
@entry
def main {
  foo(Foo.new([]))
}

def foo(bar Foo) Foo {
  return Foo.new(0)
}

@import
class Foo {
  def new(length int)
  def new(array List<int>)
}
", "
(function() {
  function c() {
    a(new Foo([]));
  }

  function a(b) {
    return new Foo(0);
  }

  c();
})();
").jsMangle

# Make sure the 32-bit integer negation special-case is handled correctly
test("
def foo List<int> {
  return [0x7FFFFFFF, -0x7FFFFFFF, 0x80000000, -0x80000000]
}

@entry
def main {
  foo
}
", "
(function() {
  function a() {
    return [2147483647, -2147483647, 1 << 31, -(1 << 31) | 0];
  }

  function b() {
    a();
  }

  b();
})();
").jsMangle

# Make sure the 32-bit integer negation special-case is handled correctly
test("
def foo List<int> {
  return [0x7FFFFFFF, -0x7FFFFFFF, 0x80000000, -0x80000000]
}

@entry
def main {
  foo
}
", "
(function() {
  function a() {
    return [2147483647, -2147483647, 1 << 31, 1 << 31];
  }

  function b() {
    a();
  }

  b();
})();
").jsMangle.foldAllConstants

# Test left shift substitution
test("
def foo List<int> {
  return [
    16384,
    131072,
    1073741824,
    -2147483648,
    0xFF000,
    0xFF0000,
    0xFF00000,
    0xFF000000,
  ]
}

@entry
def main {
  foo
}
", "
(function() {
  function a() {
    return [16384, 1 << 17, 1 << 30, 1 << 31, 1044480, 255 << 16, 255 << 20, 255 << 24];
  }

  function b() {
    a();
  }

  b();
})();
").jsMangle.foldAllConstants

# Wrapping shouldn't introduce casts
test("
type Foo = int

@entry
def main int {
  return 0 as Foo as int as Foo as int
}
", "
(function() {
  function a() {
    return 0;
  }

  process.exit(a());
})();
").jsMangle

# Wrapping should work with constant folding
test("
@entry
def main {
  dynamic.foo((0 as Foo) == (1 as Foo))
  dynamic.foo((0 as int) == (1 as int))
  dynamic.foo(0 == 1)
}

type Foo = int
", "
(function() {
  function a() {
    foo(!1), foo(!1), foo(!1);
  }

  a();
})();
").jsMangle.foldAllConstants

# Check that empty switch statements are removed
test("
@entry
def main {
  switch dynamic.x { default { dynamic.y() } }
}
", "
(function() {
  function a() {
    y();
  }

  a();
})();
").jsMangle

# Check that empty switch statements are removed
test("
@entry
def main {
  switch dynamic.x() { default { dynamic.y() } }
}
", "
(function() {
  function a() {
    x(), y();
  }

  a();
})();
").jsMangle

# Check that switch statements have a single element turn into if statements, which are then further optimized
test("
@entry
def main {
  switch dynamic.x { case X { dynamic.foo() } }
  switch dynamic.y { case Y { dynamic.bar() } }
}

type Foo = int
const X = 0
const Y = 0 as Foo
", "
(function() {
  function a() {
    x === 0 && foo(), y === 0 && bar();
  }

  a();
})();
").jsMangle.foldAllConstants

# Check that switch statements that become single-element after other optimizations turn into if statements
test("
@entry
def main {
  switch dynamic.x {
    case 0 { return }
    default { dynamic.y() }
  }
}
", "
(function() {
  function a() {
    x !== 0 && y();
  }

  a();
})();
").jsMangle

# Check that double-element switch statements turn into if statements and are optimized further
test("
@entry
def main {
  switch dynamic.x {
    case 0 { dynamic.y() }
    default { dynamic.z() }
  }
}
", "
(function() {
  function a() {
    x === 0 ? y() : z();
  }

  a();
})();
").jsMangle

# Check that pass-through switch statements are optimized
test("
enum Foo {
  FOO
  BAR
  BAZ
}

def a(x int) Foo {
  switch x {
    case 0 { return .FOO }
    case 1 { return .BAR }
    case 2 { return .BAZ }
    default { return .FOO }
  }
}

def b(x int) Foo {
  switch x {
    case 1 { return .FOO }
    case 2 { return .BAR }
    case 3 { return .BAZ }
    default { return .FOO }
  }
}

def c(x int) Foo {
  switch x {
    case 0 { return .BAR }
    case 1 { return .BAZ }
    default { return .FOO }
  }
}

def d(x Foo) int {
  switch x {
    case .FOO { return 0 }
    case .BAR { return 1 }
    case .BAZ { return 2 }
    default { return 0 }
  }
}

def e(x Foo) int {
  switch x {
    case .FOO { return 1 }
    case .BAR { return 2 }
    case .BAZ { return 3 }
    default { return 0 }
  }
}

def f(x Foo) int {
  switch x {
    case .BAR { return 0 }
    case .BAZ { return 1 }
    default { return 0 }
  }
}

def g(x int) Foo {
  switch x {
    case 1 { return .BAR }
    case 0 { return .FOO }
    default { return .FOO }
  }
}

def h(x int) Foo {
  switch x {
    case 0 { return .BAR }
    case 1 { return .FOO }
    default { return .FOO }
  }
}

def i(x int) Foo {
  switch x {
    case 0 { return .FOO }
    case 2 { return .BAZ }
    default { return .FOO }
  }
}

@entry
def main {
  a(0)
  b(0)
  c(0)
  d(.FOO)
  e(.BAR)
  f(.BAZ)
  g(0)
  h(0)
  i(0)
}
", "
(function() {
  function b(a) {
    return a > -1 && a < 3 ? a : 0;
  }

  function c(a) {
    return a > 0 && a < 4 ? a - 1 | 0 : 0;
  }

  function d(a) {
    return a > -1 && a < 2 ? a + 1 | 0 : 0;
  }

  function e(a) {
    return a > -1 && a < 3 ? a : 0;
  }

  function f(a) {
    return a > -1 && a < 3 ? a + 1 | 0 : 0;
  }

  function g(a) {
    return a > 0 && a < 3 ? a - 1 | 0 : 0;
  }

  function h(a) {
    return a > -1 && a < 2 ? a : 0;
  }

  function i(a) {
    switch (a) {
      case 0: {
        return 1;
      }

      case 1: {
        return 0;
      }
    }

    return 0;
  }

  function j(a) {
    switch (a) {
      case 0:
      case 2: {
        return a;
      }
    }

    return 0;
  }

  function k() {
    b(0), c(0), d(0), e(0), f(1), g(2), h(0), i(0), j(0);
  }

  k();
})();
").jsMangle.foldAllConstants

# Check parentheses omission for object creation
test("
@entry
def main {
  dynamic.Foo.new()
  dynamic.Foo.new(100)
  dynamic.Foo.new().foo
  dynamic.Foo.new(100).foo
}
", "
(function() {
  function a() {
    new Foo, new Foo(100), new Foo().foo, new Foo(100).foo;
  }

  a();
})();
").jsMangle

# Test equivalence of function and lambda folding
test("
def foo(x int) {
  if x == 0 { return }
  dynamic.use(x)
}

var bar = (x int) => {
  if x == 0 { return }
  dynamic.use(x)
}

@entry
def main {
  foo(0)
  bar(0)
}
", "
(function() {
  function b(a) {
    a && use(a);
  }

  function d() {
    b(0), c(0);
  }

  var c = function(a) {
    a && use(a);
  };

  d();
})();
").jsMangle

test("
class Class {}
enum Enum {}
type Type = int

@entry
def main {
  dynamic.foo(dynamic.bar is dynamic)
  dynamic.foo(dynamic.bar is fn())

  dynamic.foo(dynamic.bar is bool)
  dynamic.foo(dynamic.bar is double)
  dynamic.foo(dynamic.bar is Enum)
  dynamic.foo(dynamic.bar is int)
  dynamic.foo(dynamic.bar is Type)
  dynamic.foo(dynamic.bar is string)

  dynamic.foo(dynamic.bar is Class)
  dynamic.foo(dynamic.bar is dynamic.Dynamic)
}
", "
(function() {
  var b;

  function f(a) {
    return a === (a | 0);
  }

  function g(a) {
    return a === !!a;
  }

  function h(a) {
    return typeof a === 'number';
  }

  function i(a) {
    return typeof a === 'string';
  }

  function j() {
    foo(bar), foo(bar instanceof Function), foo(g(bar)), foo(h(bar)), foo(f(bar)), foo(f(bar)), foo(f(bar)), foo(i(bar)), foo(bar instanceof c), foo(bar instanceof Dynamic);
  }

  var c = {};
  var d = {};

  var e = {};

  j();
})();
").jsMangle

# Test default values for wrapped types
test("
@entry
def main {
  var a Bool
  var b Int
  var c Double
  var d String
  var e Bar
}

type Bool = bool
type Int = int
type Double = double
type String = string
type Bar = Foo
enum Foo {}
", "
(function() {
  function f() {
    var a = !1, b = 0, c = 0, d = null, e = 0;
  }

  f();
})();
").jsMangle

# This used to be a crash during globalization
test("
class Foo {
  def foo<T>(foo fn(Foo) T) T {
    return foo(self)
  }
}

@entry
def main {
  var foo fn(Foo) dynamic = bar => bar.foo<dynamic>(foo)
}
", "
(function() {
  function d() {
    var a = function(b) {
      return c(b, a);
    };
  }

  function c(b, a) {
    return a(b);
  }

  d();
})();
").jsMangle.globalizeAllFunctions

test("
class Foo {}

namespace Foo {
  def foo<T>(self Foo, baz fn(Foo) T) T { return baz(self) }
}

@entry
def main {
  var foo fn(Foo) dynamic = x => Foo.foo<dynamic>(x, foo)
  foo(Foo.new)
}
", "
(function() {
  function d() {
    var a = function(b) {
      return a(b);
    };
    a(new c);
  }

  function c() {
  }

  d();
})();
").jsMangle.inlineAllFunctions

# There used to be a bug where generic inlineable functions were still emitted
test("
class Foo {
  var bar List<Foo> = []
  def foo<T>(baz fn(Foo) T) List<T> { return bar.map<T>(baz) }
}

@entry
def main {
  var foo fn(Foo) dynamic = bar => bar.foo<dynamic>(foo)
  foo(Foo.new)
}
", "
(function() {
  function e() {
    var a = function(c) {
      return c.a.map(a);
    };
    a(new d);
  }

  function d() {
    this.a = [];
  }

  e();
})();
").jsMangle.inlineAllFunctions.globalizeAllFunctions

# Make sure wrapped types are unwrapped before using "instanceof"
test("
class Foo {}
type Bar = Foo

@entry
def main {
  var foo = Foo.new
  var bar = foo is Foo || foo is Bar
}
", "
(function() {
  function e() {
    var a = new b, d = a instanceof b || a instanceof b;
  }

  function b() {
  }

  var c = {};

  e();
})();
").jsMangle

# Basic usage of interfaces
test("
interface IFoo {
  def foo
}

class Foo :: IFoo {
  def foo {}
}

@entry
def main {
  var foo = Foo.new
  var ifoo = foo as IFoo
  foo.foo
  ifoo.foo
}
", "
(function() {
  function e() {
    var b = new d, c = b;
    b.a(), c.a();
  }

  function d() {
  }

  d.prototype.a = function() {
  };

  e();
})();
").jsMangle

# Basic usage of interfaces
test("
interface IFoo {
  def foo
}

class Foo :: IFoo {
  def foo {}
}

class Bar :: IFoo {
  def foo {}
}

@entry
def main {
  var foo = Foo.new
  var bar = Foo.new
  var ifoo = foo as IFoo
  foo.foo
  bar.foo
  ifoo.foo
  ifoo = bar
  ifoo.foo
}
", "
(function() {
  function f() {
    var c = new e, d = new e, b = c;
    c.a(), d.a(), b.a(), b = d, b.a();
  }

  function e() {
  }

  e.prototype.a = function() {
  };

  f();
})();
").jsMangle

# Interface removal with globalization
test("
interface IFoo {
  def foo
}

class Foo :: IFoo {
  def foo {}
}

@entry
def main {
  var foo = Foo.new
  var ifoo = foo as IFoo
  foo.foo
  ifoo.foo
}
", "
(function() {
  function e() {
    var b = new d, c = b;
    a(b), a(c);
  }

  function a(b) {
  }

  function d() {
  }

  e();
})();
").jsMangle.globalizeAllFunctions

# Interface removal should not trigger even with globalization
test("
interface IFoo {
  def foo
}

class Foo :: IFoo {
  def foo {}
}

class Bar :: IFoo {
  def foo {}
}

@entry
def main {
  var foo = Foo.new
  var bar = Bar.new
  var ifoo = foo as IFoo
  foo.foo
  bar.foo
  ifoo.foo
  ifoo = bar
  ifoo.foo
}
", "
(function() {
  function g() {
    var c = new e, d = new f, b = c;
    c.a(), d.a(), b.a(), b = d, b.a();
  }

  function e() {
  }

  e.prototype.a = function() {
  };

  function f() {
  }

  f.prototype.a = function() {
  };

  g();
})();
").jsMangle.globalizeAllFunctions

# Check overloaded functions when an interface is present
test("
interface I {
  def foo(x int) # I.foo(x int)
  def foo(x bool) # I.foo(x bool)
}

class Foo :: I {
  def foo(x int) {} # Foo.foo(x int)
  def foo(x bool) {} # Foo.foo(x bool)
}

class Bar :: I {
  def foo(x string) {} # Bar.foo(x string)
  def foo(x int) {} # Bar.foo(x int)
  def foo(x bool) {} # Bar.foo(x bool)
}

@entry
def main {
  var foo = Foo.new
  var bar = Bar.new
  foo.foo(0)
  foo.foo(false)
  bar.foo(0)
  bar.foo(false)
}
", "
(function() {
  var e;

  function h() {
    var c = new f, d = new g;
    c.a(0), c.b(!1), d.a(0), d.b(!1);
  }

  function f() {
  }

  e = f.prototype;

  // Foo.foo(x int)
  e.a = function(c) {
  };

  // Foo.foo(x bool)
  e.b = function(c) {
  };

  function g() {
  }

  e = g.prototype;

  // Bar.foo(x int)
  e.a = function(c) {
  };

  // Bar.foo(x bool)
  e.b = function(c) {
  };

  h();
})();
").jsMangle

# Check shortening of long reciprocals
test("
@entry
def foo {
  var x = 0
  var y = 0.3333333333333333 + x * 1.3333333333333333
}
", "
(function() {
  function c() {
    var a = 0, b = 1 / 3 + a * (4 / 3);
  }

  c();
})();
").jsMangle

# Check inlining of instance constants
test("
class Foo {
  const foo = 1
}

@import
class Bar {
  const bar = 2
}

def test(foo Foo, bar Bar) int {
  return foo.foo + bar.bar
}

@entry
def main {
  test(null, null)
}
", "
(function() {
  function b(a, c) {
    return a.a + 2 | 0;
  }

  function d() {
    b(null, null);
  }

  d();
})();
").jsMangle.foldAllConstants

# Check lambda cloning when mangling is active
test("
class Foo {
  const f = (x int) => x
  def new {}
  def new(x int) {}
}

@entry
def main {
  Foo.new
  Foo.new(0)
}
", "
(function() {
  function e() {
    new d, new d.b(0);
  }

  function d() {
    this.a = function(a) {
      return a;
    };
  }

  d.b = function(a) {
    this.a = function(c) {
      return c;
    };
  };

  d.b.prototype = d.prototype;

  e();
})();
").jsMangle

# Basic constant folding check
test("
class Foo {
  const foo = 0
}

@entry
def main {
  Foo.new
}
", "
(function() {
  function c() {
    new b;
  }

  function b() {
    this.a = 0;
  }

  c();
})();
").jsMangle.foldAllConstants

# Check constant folding when the constant is defined in the constructor
test("
class Foo {
  const foo int
  def new { foo = 1 }
}

@entry
def main int {
  var x = Foo.new
  return x.foo
}
", "
(function() {
  function c() {
    var a = new b;
    return a.a;
  }

  function b() {
    this.a = 1;
  }

  process.exit(c());
})();
").jsMangle.foldAllConstants

# Check mangling with typed catch blocks
test("
class Foo {
}

@entry
def main {
  try {
    throw Foo.new
  } catch e Foo {
    throw e
  }
}
", "
(function() {
  function c() {
    try {
      throw new b;
    }

    catch (a) {
      if (a instanceof b) {
        throw a;
      }

      else {
        throw a;
      }
    }
  }

  function b() {
  }

  c();
})();
").jsMangle

# Check mangling of global variables
test("
@export
def main double {
  return a + ns1.b + c + x + ns2.y + z
}

var a = 0.0
namespace ns1 {
  var b = 0.0
}
var c = 0.0

@export
var x = 0.0
@export
namespace ns2 {
  var y = 0.0
}
var z = 0.0
", "
(function(f) {
  f.main = function() {
    return a + b + c + f.x + f.ns2.y + d;
  };

  f.ns2 = {};

  f.x = 0;
  f.ns2.y = 0;
  var a = 0, c = 0, d = 0, b = 0;
})(this);
").jsMangle

# Check mangling of hook expressions containing assignments
test("
class Foo {
  var y Foo = null
}

@export
def test(x Foo) Foo {
  return (x = x.y) != null ? x : Foo.new
}
", "
(function(c) {
  function b() {
    this.a = null;
  }

  c.test = function(a) {
    return (a = a.a) || new b;
  };
})(this);
").jsMangle

# Interface removal with an instance variable shouldn't prevent dead code stripping a class constructor
test("
interface IFoo {
  def foo
}

class Foo :: IFoo {
  const _foo fn(Foo)

  def foo {
    _foo(self)
  }
}

@export
def test(foo Foo) {
  foo.foo
}
", "
(function(c) {
  function b(a) {
    a.a(a);
  }

  c.test = function(a) {
    b(a);
  };
})(this);
").jsMangle.globalizeAllFunctions

# Check for a crash due to a cast with a resolved type of null after inlining
test("
class Foo {}

namespace Foo {
  def new(x bool) Foo {
    return x as dynamic
  }
}

@entry
def test {
  var foo = Foo.new(false)
}
", "
(function() {
  function b() {
    var a = !1;
  }

  b();
})();
").jsMangle.inlineAllFunctions

# Check for prototype caching for secondary constructors
test("
class Foo {
  def new {}
  def new(x int) {}
  def foo {}
}

class Bar {
  def new {}
  def foo {}
}

class Baz {
  def new {}
  def new(x int) {}
}

@entry
def main {
  Foo.new.foo
  Foo.new(0).foo
  Bar.new.foo
  Baz.new
  Baz.new(0)
}
", "
(function() {
  var e;

  function j() {
    new g().a(), new g.b(0).a(), new h().c(), new i, new i.d(0);
  }

  function g() {
  }

  e = g.prototype;

  g.b = function(f) {
  };

  g.b.prototype = e;

  e.a = function() {
  };

  function h() {
  }

  h.prototype.c = function() {
  };

  function i() {
  }

  i.d = function(f) {
  };

  i.d.prototype = i.prototype;

  j();
})();
").jsMangle

# Test assignment collapsing
test("
def foo(a int, b int, c int, f fn() int) {
  a = 1
  b = 1
  c = 1

  a = 1
  b = 2
  c = 3

  a = f()
  b = f()
  c = f()
}

def bar(a dynamic, f fn() int) {
  a[0] = 1
  a[1] = 1
  a[2] = 1

  a[0] = 1
  a[1] = 2
  a[2] = 3

  a[0] = f()
  a[1] = f()
  a[2] = f()
}

def baz(a dynamic, f fn() int) {
  a.x = 1
  a[1] = 1
  a[\"y\"] = 1

  a.x = 1
  a[1] = 2
  a[\"y\"] = 3

  a.x = f()
  a[1] = f()
  a[\"y\"] = f()
}

@entry
def main {
  foo(0, 0, 0, null)
  bar(0, null)
  baz(0, null)
}
", "
(function() {
  function e(a, b, c, d) {
    a = b = c = a = 1, b = 2, c = 3, a = d(), b = d(), c = d();
  }

  function f(a, b) {
    a[0] = a[1] = a[2] = a[0] = 1, a[1] = 2, a[2] = 3, a[0] = b(), a[1] = b(), a[2] = b();
  }

  function g(a, b) {
    a.x = a[1] = a.y = a.x = 1, a[1] = 2, a.y = 3, a.x = b(), a[1] = b(), a.y = b();
  }

  function h() {
    e(0, 0, 0, null), f(0, null), g(0, null);
  }

  h();
})();
").jsMangle

# Test that the number shorterer that turns "33554432" into "1 << 25" doesn't cause a crash for enum values
test("
flags Foo {
  A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z
}

@entry
def test int {
  return Foo.Z
}
", "
(function() {
  function c() {
    return b.a;
  }

  var b = {
    a: 1 << 25
  };

  process.exit(c());
})();
").jsMangle

# Check that int casts aren't inserted when != turns into ^
test("
@entry
def test {
  var a = 0, b = 0, c = 0, d = 0
  while a - b != c - d {}
  while ((a - b) ^ (c - d)) != 0 {}
  while (a - b | 0) != (c - d | 0) {}
  while (a - b | 1) != (c - d | 1) {}
}
", "
(function() {
  function e() {
    for (var a = 0, b = 0, c = 0, d = 0; a - b ^ c - d;) {
    }

    for (; a - b ^ c - d;) {
    }

    for (; a - b ^ c - d;) {
    }

    for (; (a - b | 1) ^ (c - d | 1);) {
    }
  }

  e();
})();
").jsMangle

# Check mangled map constructors
test("
@entry
def test {
  var a = {1: 2, 3: 4}
  var b = {\"1\": 2, \"3\": 4}
}
", "
(function() {
  var e = Object.create || function(b) {
    return {__proto__: b};
  };

  function f() {
    var b = {1: 2, 3: 4}, c = a(a(e(null), '1', 2), '3', 4);
  }

  function a(d, b, c) {
    return d[b] = c, d;
  }

  f();
})();
").jsMangle.inlineAllFunctions

# Check export syntax
test("
@export {
  class Class { def foo { new } }
  enum Enum { def toString { Namespace.foo } }
  namespace Namespace { def foo { (0 as Enum).toString } }
  def Function {}
  var Variable = 0
}
", "
(function(c) {
  var b = {};

  b.toString = function(a) {
    c.Namespace.foo();
  };

  c.Function = function() {
  };

  c.Class = function() {
  };

  c.Class.prototype.foo = function() {
    new c.Class;
  };

  c.Enum = {};

  c.Namespace = {};

  c.Namespace.foo = function() {
    b.toString(0);
  };

  c.Variable = 0;
})(this);
").jsMangle

# Check parenthesis removal for new expressions in cast expressions
test("
@export
def foo dynamic {
  return (dynamic.Foo.new as dynamic).foo
}
", "
(function(a) {
  a.foo = function() {
    return new Foo().foo;
  };
})(this);
").jsMangle

# Check parenthesis removal for new expressions in parameterized expressions
test("
@export
def foo dynamic {
  return dynamic.Foo.new<int>.foo
}
", "
(function(c) {
  var a;

  c.foo = function() {
    return new Foo().foo;
  };
})(this);
").jsMangle

  }
}
